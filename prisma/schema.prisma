// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// [Models]
model Geolocation {
  id              Int     @id @default(autoincrement())
  zip_code_prefix String  @db.Char(5)
  city            String? @db.VarChar(255)
  city_codename   String  @db.VarChar(255)
  state           String  @db.Char(2)
  latitude        Float?
  longitude       Float?

  customers Customer[]
  sellers   Seller[]

  @@unique([zip_code_prefix, city_codename, state])
  @@map("geolocation")
}

model Customer {
  id     String  @id @db.Char(32)
  name   String? @db.VarChar(255)
  orders Order[]

  geolocation    Geolocation? @relation(fields: [geolocation_id], references: [id])
  geolocation_id Int?

  @@map("customer")
}

model Seller {
  id     String      @id @db.Char(32)
  name   String?     @db.VarChar(255)
  orders OrderItem[]

  geolocation    Geolocation? @relation(fields: [geolocation_id], references: [id])
  geolocation_id Int?

  @@map("seller")
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String?   @unique @db.VarChar(255)
  products Product[]

  @@map("product_category")
}

model Product {
  id                 String      @id @db.Char(32)
  name_lenght        Int?
  description_lenght Int?
  photos_quantity    Int?
  weight_g           Float?
  length_cm          Float?
  height_cm          Float?
  width_cm           Float?
  orders             OrderItem[]

  product_category    ProductCategory? @relation(fields: [product_category_id], references: [id])
  product_category_id Int?

  @@map("product")
}

model Order {
  id                      String    @id @db.Char(32)
  status                  String    @db.VarChar(255)
  purchase_timestamp      DateTime
  approved_at             DateTime?
  delivered_carrier_date  DateTime?
  delivered_customer_date DateTime?
  estimated_delivery_date DateTime?

  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String   @db.Char(32)

  review  OrderReview[]
  payment OrderPayment[]
  items   OrderItem[]

  @@map("order")
}

model OrderReview {
  id              String    @id @db.Char(32)
  score           Int
  comment_title   String?   @db.VarChar(255)
  comment_message String?   @db.VarChar(500)
  creation_date   DateTime
  answer_date     DateTime?

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String

  @@map("order_review")
}

model OrderPayment {
  id           Int    @id @default(autoincrement())
  type         String @db.VarChar(255)
  sequential   Int
  installments Int
  value        Float

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @db.Char(32)

  @@map("order_payment")
}

model OrderItem {
  id                  Int      @id @default(autoincrement())
  order_item_id       Int      @db.Integer
  shipping_limit_date DateTime
  price               Float
  freight_value       Float

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @db.Char(32)

  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @db.Char(32)

  seller    Seller @relation(fields: [seller_id], references: [id])
  seller_id String @db.Char(32)

  @@map("order_item")
}
